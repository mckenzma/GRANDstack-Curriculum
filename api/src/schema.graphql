type Rank {
  id: ID!
  rankOrder: Int!
  name: String!
  
  strike: [Strike] @relation(name: "REQUIRED_FOR", direction: "IN")
  block: [Block] @relation(name: "REQUIRED_FOR", direction: "IN")
  kick: [Kick] @relation(name: "REQUIRED_FOR", direction: "IN")
}

type Strike {
  id: ID!
  name: String!
  description: String!

  steps: [StepDescription] @relation(name: "STEP_FOR", direction: "IN")
  ranks: [Rank] @relation(name: "REQUIRED_FOR", direction: "OUT")
} 

type StepDescription {
  _id: ID!
  text: String
  number: String
  strike: [Strike] @relation(name: "STEP_FOR", direction: "OUT")
  block: [Block] @relation(name: "STEP_FOR", direction: "OUT")
  kick: [Kick] @relation(name: "STEP_FOR", direction: "OUT")
  stance: [Stance] @relation(name: "STEP_FOR", direction: "OUT")
  movement: [Movement] @relation(name: "STEP_FOR", direction: "OUT")
  turn: [Turn] @relation(name: "STEP_FOR", direction: "OUT")
}

type Block {
  # name: ID!
  name: String!
  steps: [StepDescription] @relation(name: "STEP_FOR", direction: "IN")
  rank: [Rank] @relation(name: "REQUIRED_FOR", direction: "OUT")
}

type Kick {
  # name: ID!
  name: String!
  steps: [StepDescription] @relation(name: "STEP_FOR", direction: "IN")
  rank: [Rank] @relation(name: "REQUIRED_FOR", direction: "OUT")
}

type Stance {
  # name: ID!
  name: String!
  steps: [StepDescription] @relation(name: "STEP_FOR", direction: "IN")
  rank: [Rank] @relation(name: "REQUIRED_FOR", direction: "OUT")
}

type Movement {
  # name: ID!
  name: String!
  steps: [StepDescription] @relation(name: "STEP_FOR", direction: "IN")
  rank: [Rank] @relation(name: "REQUIRED_FOR", direction: "OUT")
}

type Turn {
  # name: ID!
  name: String!
  steps: [StepDescription] @relation(name: "STEP_FOR", direction: "IN")
  rank: [Rank] @relation(name: "REQUIRED_FOR", direction: "OUT")
}

type Kata {
  # name: ID!
  name: String!
  # steps: [StepDescription] @relation(name: "STEP_FOR", direction: "IN")
  # rank: [Rank] @relation(name: "REQUIRED_FOR", direction: "OUT")
}

type Mutation {
  MergeStrikeRank(fromStrikeID: ID!, toRankID: ID!): Rank @cypher(
    statement:
    """
    MATCH (strike:Strike {id: $fromStrikeID})
    MATCH (rank:Rank {id: $toRankID})
    MERGE (strike)-[:REQUIRED_FOR]->(rank)
    RETURN rank
    """
  )

  MergeStrikeRanks(fromStrikeID: ID!, toRankIDs: [ID!]): [Rank] @cypher(
    statement:
    """
    MATCH (strike: Strike {id: $fromStrikeID})
    UNWIND $toRankIDs AS toRankID
    MATCH (rank:Rank {id: toRankID})
    MERGE (strike)-[:REQUIRED_FOR]->(rank)
    RETURN rank
    """
  )
}

# type Query {

# }